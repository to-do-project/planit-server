# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Deploy Spring boot to Amazon EC2

on:
  push:
    branches:
      - main
      
env:
  PROJECT_NAME: planit-server
  S3_BUCKET_NAME: prod-planit-bucket
  RESOURCE_PATH: ./src/main/resources/application-prod.yml
  CODE_DEPLOY_APPLICATION_NAME: prod-planit-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: prod-planit-group

jobs:
  deploy:
    name: DEPLOY
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
          
      - name: Set application-prod.yml file 
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }} 
        env:
          server.port: ${{ secrets.SERVER_PORT }}
          spring.application.name: ${{ secrets.APPLICATION_NAME }}
          spring.datasource.driver-class-name: ${{ secrets.RDS_DRIVER_CLASS }}
          spring.datasource.url: ${{ secrets.PROD_RDS_HOST }} 
          spring.datasource.username: ${{ secrets.RDS_USERNAME }} 
          spring.datasource.password: ${{ secrets.RDS_PASSWORD }} 
          spring.mvc.pathmatch.matching-strategy: ${{ secrets.MVC_MATCH_STRATEGY }} 
          spring.jpa.hibernate.ddl-auto: ${{ secrets.PROD_DDL_AUTO }} 
          spring.jpa.hibernate.naming.physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl 
          spring.jpa.show-sql: true
          spring.jpa.database-platform: org.hibernate.dialect.MySQL5Dialect
          spring.jpa.properties.hibernate.format_sql: true
          spring.jpa.properties.hibernate.use_sql_comments: true
          spring.redis.host: ${{ secrets.PROD_REDIS_HOST }}
          spring.redis.port: ${{ secrets.REDIS_PORT }}
          spring.mail.host: ${{ secrets.MAIL_HOST }} 
          spring.mail.port: ${{ secrets.MAIL_PORT }} 
          spring.mail.username: ${{ secrets.MAIL_USERNAME }} 
          spring.mail.password: ${{ secrets.MAIL_PASSWORD }}
          spring.mail.properties.mail.smtp.starttls.enable: true
          spring.mail.properties.mail.smtp.auth: true
          spring.batch.job.enabled: false
          spring.batch.jdbc.initialize-schema: always
          jwt.secret-key: ${{ secrets.JWT_SECRET_KEY }} 
          jwt.access-token-expire-time: ${{ secrets.ACCESS_TOKEN_EXPIRE_TIME }} 
          jwt.refresh-token-expire-time: ${{ secrets.REFRESH_TOKEN_EXPIRE_TIME }} 
          jwt.refresh-token-reissue-time: ${{ secrets.REFRESH_TOKEN_REISSUE_TIME }} 
          jwt.access-token-header-name: ${{ secrets.ACCESS_TOKEN_HEADER_NAME }} 
          jwt.refresh-token-header-name: ${{ secrets.REFRESH_TOKEN_HEADER_NAME }} 
          jwt.user-id-header-name: ${{ secrets.USER_ID_HEADER_NAME }}
          jwt.device-token-header-name : ${{secrets.DEVICE_TOKEN_HEADER_NAME}}
          fcm.key.path: firebase_service_key.json
          fcm.key.scope: ${{ secrets.FIREBASE_CREATE_SCOPED }}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Build with Gradle
        run: ./gradlew build
        shell: bash
        
      - name: Make zip file
        run: zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

      - name: Code Deploy
        run: aws deploy create-deployment --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
